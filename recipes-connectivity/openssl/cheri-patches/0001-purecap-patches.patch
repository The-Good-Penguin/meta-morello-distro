From c571aa7d659815902276a0c69eba170eb77074a1 Mon Sep 17 00:00:00 2001
From: Brooks Davis <brooks@one-eyed-alien.net>
Date: Mon, 3 Apr 2023 11:23:57 +0100
Subject: [PATCH] Purecap patches from CHERI BSD that are squashed and rebased.

Re-add side channels [1]

The branchless assignments use a pattern which results in the lost of tags
on function pointers and odd length corruption for data pointers.  For the
current model of function pointers (single PCC) it might be possible to
fix the function pointer case, but this can't work for objects.

Use more vaddr_t to fix -Wcheri-bitwise-operations [2]

[1] https://github.com/CTSRD-CHERI/cheribsd/commit/a0eac17db0649fe134bed192bff305da84c4125d
[2] https://github.com/CTSRD-CHERI/cheribsd/commit/a2a2a118f7944938e1fc5bb53875eaf5f4141136

Co-authored-by: Brooks Davis <brooks@one-eyed-alien.net>
Co-authored-by: Alexander Richardson <Alexander.Richardson@cl.cam.ac.uk>

Signed-off-by: Pawel Zalewski <pzalewski@thegoodpenguin.co.uk>
---
 crypto/bn/bn_nist.c | 48 +++++++++++++++++++++++++++++++++++++--------
 1 file changed, 40 insertions(+), 8 deletions(-)

diff --git a/crypto/bn/bn_nist.c b/crypto/bn/bn_nist.c
index da10c40..7f5c6bd 100644
--- a/crypto/bn/bn_nist.c
+++ b/crypto/bn/bn_nist.c
@@ -338,7 +338,7 @@ int BN_nist_mod_192(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
                         sizeof(unsigned int)];
     } buf;
     BN_ULONG c_d[BN_NIST_192_TOP], *res;
-    PTR_SIZE_INT mask;
+    ptraddr_t mask;
     static const BIGNUM ossl_bignum_nist_p_192_sqr = {
         (BN_ULONG *)_nist_p_192_sqr,
         OSSL_NELEM(_nist_p_192_sqr),
@@ -442,10 +442,14 @@ int BN_nist_mod_192(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
     mask =
         0 - (PTR_SIZE_INT) bn_sub_words(c_d, r_d, _nist_p_192[0],
                                         BN_NIST_192_TOP);
-    mask &= 0 - (PTR_SIZE_INT) carry;
+    mask &= 0 - (ptraddr_t) carry;
+#ifndef __CHERI_PURE_CAPABILITY__
     res = c_d;
     res = (BN_ULONG *)
         (((PTR_SIZE_INT) res & ~mask) | ((PTR_SIZE_INT) r_d & mask));
+#else
+    res = mask ? r_d : c_d;
+#endif
     nist_cp_bn(r_d, res, BN_NIST_192_TOP);
     r->top = BN_NIST_192_TOP;
     bn_correct_top(r);
@@ -479,7 +483,7 @@ int BN_nist_mod_224(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
                         sizeof(unsigned int)];
     } buf;
     BN_ULONG c_d[BN_NIST_224_TOP], *res;
-    PTR_SIZE_INT mask;
+    ptraddr_t mask;
     union {
         bn_addsub_f f;
         PTR_SIZE_INT p;
@@ -616,19 +620,27 @@ int BN_nist_mod_224(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
         carry =
             (int)bn_add_words(r_d, r_d, _nist_p_224[-carry - 1],
                               BN_NIST_224_TOP);
+#ifndef __CHERI_PURE_CAPABILITY__
         mask = 0 - (PTR_SIZE_INT) carry;
         u.p = ((PTR_SIZE_INT) bn_sub_words & mask) |
             ((PTR_SIZE_INT) bn_add_words & ~mask);
+#else
+	u.f = carry ? bn_sub_words : bn_add_words;
+#endif
     } else
         carry = 1;
 
     /* otherwise it's effectively same as in BN_nist_mod_192... */
     mask =
         0 - (PTR_SIZE_INT) (*u.f) (c_d, r_d, _nist_p_224[0], BN_NIST_224_TOP);
-    mask &= 0 - (PTR_SIZE_INT) carry;
+    mask &= 0 - (ptraddr_t) carry;
+#ifndef __CHERI_PURE_CAPABILITY__
     res = c_d;
     res = (BN_ULONG *)(((PTR_SIZE_INT) res & ~mask) |
                        ((PTR_SIZE_INT) r_d & mask));
+#else
+    res = mask ? r_d : c_d;
+#endif
     nist_cp_bn(r_d, res, BN_NIST_224_TOP);
     r->top = BN_NIST_224_TOP;
     bn_correct_top(r);
@@ -660,7 +672,7 @@ int BN_nist_mod_256(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
                         sizeof(unsigned int)];
     } buf;
     BN_ULONG c_d[BN_NIST_256_TOP], *res;
-    PTR_SIZE_INT mask;
+    ptraddr_t mask;
     union {
         bn_addsub_f f;
         PTR_SIZE_INT p;
@@ -859,18 +871,26 @@ int BN_nist_mod_256(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
         carry =
             (int)bn_add_words(r_d, r_d, _nist_p_256[-carry - 1],
                               BN_NIST_256_TOP);
+#ifndef __CHERI_PURE_CAPABILITY__
         mask = 0 - (PTR_SIZE_INT) carry;
         u.p = ((PTR_SIZE_INT) bn_sub_words & mask) |
             ((PTR_SIZE_INT) bn_add_words & ~mask);
+#else
+	u.f = carry ? bn_sub_words : bn_add_words;
+#endif
     } else
         carry = 1;
 
     mask =
         0 - (PTR_SIZE_INT) (*u.f) (c_d, r_d, _nist_p_256[0], BN_NIST_256_TOP);
-    mask &= 0 - (PTR_SIZE_INT) carry;
+    mask &= 0 - (ptraddr_t) carry;
+#ifndef __CHERI_PURE_CAPABILITY__
     res = c_d;
     res = (BN_ULONG *)(((PTR_SIZE_INT) res & ~mask) |
                        ((PTR_SIZE_INT) r_d & mask));
+#else
+    res = mask ? r_d : c_d;
+#endif
     nist_cp_bn(r_d, res, BN_NIST_256_TOP);
     r->top = BN_NIST_256_TOP;
     bn_correct_top(r);
@@ -906,7 +926,7 @@ int BN_nist_mod_384(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
                         sizeof(unsigned int)];
     } buf;
     BN_ULONG c_d[BN_NIST_384_TOP], *res;
-    PTR_SIZE_INT mask;
+    ptraddr_t mask;
     union {
         bn_addsub_f f;
         PTR_SIZE_INT p;
@@ -1140,18 +1160,26 @@ int BN_nist_mod_384(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
         carry =
             (int)bn_add_words(r_d, r_d, _nist_p_384[-carry - 1],
                               BN_NIST_384_TOP);
+#ifndef __CHERI_PURE_CAPABILITY__
         mask = 0 - (PTR_SIZE_INT) carry;
         u.p = ((PTR_SIZE_INT) bn_sub_words & mask) |
             ((PTR_SIZE_INT) bn_add_words & ~mask);
+#else
+	u.f = carry ? bn_sub_words : bn_add_words;
+#endif
     } else
         carry = 1;
 
     mask =
         0 - (PTR_SIZE_INT) (*u.f) (c_d, r_d, _nist_p_384[0], BN_NIST_384_TOP);
-    mask &= 0 - (PTR_SIZE_INT) carry;
+    mask &= 0 - (ptraddr_t) carry;
+#ifndef __CHERI_PURE_CAPABILITY__
     res = c_d;
     res = (BN_ULONG *)(((PTR_SIZE_INT) res & ~mask) |
                        ((PTR_SIZE_INT) r_d & mask));
+#else
+    res = mask ? r_d : c_d;
+#endif
     nist_cp_bn(r_d, res, BN_NIST_384_TOP);
     r->top = BN_NIST_384_TOP;
     bn_correct_top(r);
@@ -1224,9 +1252,13 @@ int BN_nist_mod_521(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
     mask =
         0 - (PTR_SIZE_INT) bn_sub_words(t_d, r_d, _nist_p_521,
                                         BN_NIST_521_TOP);
+#ifndef __CHERI_PURE_CAPABILITY__
     res = t_d;
     res = (BN_ULONG *)(((PTR_SIZE_INT) res & ~mask) |
                        ((PTR_SIZE_INT) r_d & mask));
+#else
+    res = mask ? r_d : t_d;
+#endif
     nist_cp_bn(r_d, res, BN_NIST_521_TOP);
     r->top = BN_NIST_521_TOP;
     bn_correct_top(r);
-- 
2.34.1

