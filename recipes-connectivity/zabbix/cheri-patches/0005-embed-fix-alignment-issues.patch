From f6c3242099c8ee29ed5e9d9bfb0ee65661f5321f Mon Sep 17 00:00:00 2001
From: Pawel Zalewski <pzalewski@thegoodpenguin.co.uk>
Date: Tue, 28 Nov 2023 09:50:06 +0000
Subject: [PATCH 5/7] embed: fix alignment issues

The zabbix internal embed allocators will take a properly aligned
pointer, cast it to u64 pointer store the allocated size in its
first memory chunk and then use u64 pointer aritchmetic to increment the
pointer. This is then returned as the base address for the allocated heap.

In CHERI this means that the base adress of the memory area which is then
interpreted as an address of a capability will be misalligned as
mod 16 will not be zero. This can be fixed by using align/up down but
preferably a data object should be created here with [.size, .pdata]

Signed-off-by: Pawel Zalewski <pzalewski@thegoodpenguin.co.uk>
---
 src/libs/zbxembed/embed.c | 29 +++++++++++++++++++++++------
 1 file changed, 23 insertions(+), 6 deletions(-)

diff --git a/src/libs/zbxembed/embed.c b/src/libs/zbxembed/embed.c
index 23b0d47..f4b3a22 100644
--- a/src/libs/zbxembed/embed.c
+++ b/src/libs/zbxembed/embed.c
@@ -39,6 +39,22 @@
 #define ZBX_ES_SCRIPT_HEADER	"function(value){"
 #define ZBX_ES_SCRIPT_FOOTER	"\n}"
 
+#if __has_builtin(__builtin_align_up)
+#define TYPEALIGN(ALIGNVAL,LEN)  \
+	(__builtin_align_up((LEN), ALIGNVAL))
+#else
+#define TYPEALIGN(ALIGNVAL,LEN)  \
+	(((uintptr_t) (LEN) + ((ALIGNVAL) - 1)) & ~((uintptr_t) ((ALIGNVAL) - 1)))
+#endif
+
+#if __has_builtin(__builtin_align_down)
+#define TYPEALIGN_DOWN(ALIGNVAL,LEN)  \
+	(__builtin_align_down((LEN), ALIGNVAL))
+#else
+#define TYPEALIGN_DOWN(ALIGNVAL,LEN) \
+	(((uintptr_t) (LEN)) & ~((uintptr_t) ((ALIGNVAL) - 1)))
+#endif
+
 /******************************************************************************
  *                                                                            *
  * Function: es_handle_error                                                  *
@@ -78,7 +94,7 @@ static void	*es_malloc(void *udata, duk_size_t size)
 	uptr = zbx_malloc(NULL, size + ZBX_ES_PAD);
 	*uptr++ = size;
 
-	return uptr;
+	return TYPEALIGN(16,uptr);
 }
 
 static void	*es_realloc(void *udata, void *ptr, duk_size_t size)
@@ -90,7 +106,7 @@ static void	*es_realloc(void *udata, void *ptr, duk_size_t size)
 	if (NULL != uptr)
 	{
 		--uptr;
-		old_size = *uptr + ZBX_ES_PAD;
+		old_size = *TYPEALIGN_DOWN(16,uptr) + ZBX_ES_PAD;
 	}
 	else
 		old_size = 0;
@@ -104,10 +120,10 @@ static void	*es_realloc(void *udata, void *ptr, duk_size_t size)
 	}
 
 	env->total_alloc += size + ZBX_ES_PAD - old_size;
-	uptr = zbx_realloc(uptr, size + ZBX_ES_PAD);
+	uptr = zbx_realloc(TYPEALIGN_DOWN(16,uptr), size + ZBX_ES_PAD);
 	*uptr++ = size;
 
-	return uptr;
+	return TYPEALIGN(16, uptr);
 }
 
 static void	es_free(void *udata, void *ptr)
@@ -117,8 +133,9 @@ static void	es_free(void *udata, void *ptr)
 
 	if (NULL != ptr)
 	{
-		env->total_alloc -= (*(--uptr) + ZBX_ES_PAD);
-		zbx_free(uptr);
+		env->total_alloc -= (*(TYPEALIGN_DOWN(16,--uptr)) + ZBX_ES_PAD);
+		void * ptr_aligned = TYPEALIGN_DOWN(16,uptr);
+		zbx_free(ptr_aligned);
 	}
 }
 
-- 
2.34.1

